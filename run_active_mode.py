#!/usr/bin/env python3
"""
Script de lancement pour le Mode Conversationnel Actif

Ce script lance l'agent IA Reddit en mode actif avec sauvegarde
compl√®te de toutes les actions dans le dossier data/.
"""

import sys
import os
import time
import argparse
from pathlib import Path
from datetime import datetime, timedelta

# Ajouter le dossier src au path
current_dir = Path(__file__).parent
src_dir = current_dir / "src"
sys.path.insert(0, str(src_dir))

# Changer le r√©pertoire de travail vers le dossier du projet
os.chdir(current_dir)

from config_manager import ConfigManager, setup_logging
from reddit_ai_agent import RedditAIAgent
from active_data_manager import ActiveDataManager


def run_active_mode(duration_hours: int, config_path: str = "config/config_conversationnel.yaml"):
    """Lance l'agent en mode actif pour une dur√©e donn√©e"""
    print(f"=== Mode Conversationnel Actif ===")
    print(f"Dur√©e: {duration_hours} heures")
    print(f"Configuration: {config_path}")
    print()
    
    # V√©rifier la configuration
    config_manager = ConfigManager(config_path)
    if not config_manager.load_config():
        print("‚ùå Erreur: Impossible de charger la configuration")
        return False
    
    # Avertissement sur le mode dry run
    if config_manager.is_dry_run():
        print("‚ö†Ô∏è  MODE DRY RUN ACTIV√â - Aucune action r√©elle ne sera effectu√©e")
        print("   Les r√©ponses seront g√©n√©r√©es mais pas post√©es sur Reddit")
    else:
        print("üö® MODE ACTIF - Les actions seront r√©ellement effectu√©es sur Reddit")
        response = input("√ätes-vous s√ªr de vouloir continuer ? (oui/non): ")
        if response.lower() not in ['oui', 'o', 'yes', 'y']:
            print("Annulation demand√©e par l'utilisateur")
            return False
    
    print()
    print("Subreddits surveill√©s:")
    enabled_subreddits = config_manager.get_enabled_subreddits()
    for sub in enabled_subreddits:
        status = []
        if sub.comment_enabled:
            status.append("commentaires")
        if sub.post_enabled:
            status.append("posts")
        print(f"  - r/{sub.name} ({', '.join(status)})")
    
    print()
    print("D√©marrage de l'agent...")
    
    # Cr√©er l'agent
    agent = RedditAIAgent(config_path)
    
    # Calculer l'heure de fin
    start_time = datetime.now()
    end_time = start_time + timedelta(hours=duration_hours)
    
    print(f"D√©but: {start_time.strftime('%H:%M:%S')}")
    print(f"Fin pr√©vue: {end_time.strftime('%H:%M:%S')}")
    print()
    
    try:
        # Initialiser l'agent
        if not agent.initialize():
            print("‚ùå √âchec de l'initialisation de l'agent")
            return False
        
        print("‚úÖ Agent initialis√© avec succ√®s")
        print("üìä Toutes les actions seront sauvegard√©es dans data/active_mode/")
        print()
        
        # D√©marrer la surveillance
        agent.running = True
        cycle = 1
        
        while datetime.now() < end_time and agent.running:
            print(f"=== Cycle {cycle} ===")
            current_time = datetime.now()
            remaining = end_time - current_time
            print(f"Temps restant: {str(remaining).split('.')[0]}")
            
            # Traiter chaque subreddit
            for subreddit_config in enabled_subreddits:
                if not agent.running:
                    break
                
                print(f"Surveillance de r/{subreddit_config.name}...")
                agent._monitor_subreddit(subreddit_config)
            
            # Afficher les statistiques
            if agent.data_manager:
                stats = agent.data_manager.get_session_stats()
                print(f"üìä Stats: {stats['posts_scraped']} posts, "
                      f"{stats['responses_posted']} r√©ponses, "
                      f"{stats['actions_performed']} actions")
            
            cycle += 1
            
            # Attendre avant le prochain cycle (5 minutes par d√©faut)
            if datetime.now() < end_time and agent.running:
                wait_time = 300  # 5 minutes
                print(f"Attente de {wait_time} secondes avant le prochain cycle...")
                
                # Attendre avec possibilit√© d'interruption
                for i in range(wait_time):
                    if not agent.running or datetime.now() >= end_time:
                        break
                    time.sleep(1)
                    
                    # Afficher un point toutes les 30 secondes
                    if (i + 1) % 30 == 0:
                        print(".", end="", flush=True)
                
                print()  # Nouvelle ligne apr√®s les points
        
        print("\n=== Fin de la session ===")
        
        # Arr√™t propre
        agent._shutdown()
        
        # Afficher les statistiques finales
        if agent.data_manager:
            final_stats = agent.data_manager.get_session_stats()
            print(f"\nüìä Statistiques finales:")
            print(f"   Posts scrap√©s: {final_stats['posts_scraped']}")
            print(f"   R√©ponses post√©es: {final_stats['responses_posted']}")
            print(f"   Posts cr√©√©s: {final_stats['posts_created']}")
            print(f"   Actions totales: {final_stats['actions_performed']}")
            print(f"   Erreurs: {final_stats['errors_encountered']}")
            print(f"   Dur√©e: {final_stats['session_duration_minutes']:.1f} minutes")
            print(f"   Actions/heure: {final_stats['actions_per_hour']:.1f}")
            
            # Exporter un rapport final
            print(f"\nüìÑ Donn√©es sauvegard√©es dans:")
            print(f"   - data/active_mode/active_mode.db (base de donn√©es)")
            print(f"   - data/active_mode/scraped_posts/ (posts scrap√©s)")
            print(f"   - data/active_mode/posted_responses/ (r√©ponses post√©es)")
            print(f"   - data/active_mode/actions_log/ (log des actions)")
            print(f"   - data/active_mode/reports/ (rapports)")
        
        print("\n‚úÖ Session termin√©e avec succ√®s!")
        return True
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Arr√™t demand√© par l'utilisateur")
        if agent:
            agent.running = False
            agent._shutdown()
        return True
    except Exception as e:
        print(f"\n‚ùå Erreur pendant l'ex√©cution: {e}")
        if agent:
            agent.running = False
            agent._shutdown()
        return False


def main():
    parser = argparse.ArgumentParser(description='Mode Conversationnel Actif - Agent IA Reddit')
    parser.add_argument('--config', default='config/config_conversationnel.yaml', 
                       help='Fichier de configuration (d√©faut: config/config_conversationnel.yaml)')
    parser.add_argument('--duration', type=float, default=2.0,
                       help='Dur√©e en heures (d√©faut: 2.0)')
    parser.add_argument('--stats', action='store_true',
                       help='Afficher les statistiques de la base de donn√©es active')
    
    args = parser.parse_args()
    
    if args.stats:
        # Afficher les statistiques de la base de donn√©es active
        try:
            data_manager = ActiveDataManager()
            stats = data_manager.get_database_stats()
            
            print("=== Statistiques de la Base de Donn√©es Active ===")
            print(f"Posts scrap√©s: {stats.get('total_posts_scraped', 0)}")
            print(f"R√©ponses post√©es: {stats.get('total_responses_posted', 0)}")
            print(f"Posts cr√©√©s: {stats.get('total_posts_created', 0)}")
            print(f"Actions logg√©es: {stats.get('total_actions_logged', 0)}")
            print(f"Score moyen r√©ponses: {stats.get('avg_response_score', 0)}")
            print(f"Score moyen posts: {stats.get('avg_post_score', 0)}")
            print(f"Taille DB: {stats.get('database_size_mb', 0):.2f} MB")
            
            print("\nPosts par subreddit:")
            for subreddit, count in stats.get('posts_by_subreddit', {}).items():
                print(f"  r/{subreddit}: {count} posts")
            
            return 0
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des stats: {e}")
            return 1
    
    # Validation de la dur√©e
    if args.duration <= 0:
        print("‚ùå Erreur: La dur√©e doit √™tre positive")
        return 1
    
    if args.duration > 24:
        print("‚ö†Ô∏è  Attention: Dur√©e sup√©rieure √† 24 heures")
        response = input("Continuer ? (oui/non): ")
        if response.lower() not in ['oui', 'o', 'yes', 'y']:
            return 0
    
    # Lancer le mode actif
    success = run_active_mode(args.duration, args.config)
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())

